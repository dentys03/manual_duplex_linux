#!/bin/bash

#TODO:
# - figure out why and when printer is spitting one blank file.
#
# -o page-set=even makes the printer spit one blank before printing
# looks like it has something to do with the duplex printing instructions

# Return even page numbers from 1..num_pages
even_pages() {
    num_pages=$1
    i=2
    out=
    while [ "$i" -le "$num_pages" ]; do
        out="${out}${i},"
        i=$((i+2))
    done
    printf '%s\n' "${out%,}"
}

get_running_user() {
    if [[ -n "$user" ]]; then
        echo "$user"
        return
    fi
    login=$(logname 2>/dev/null)
    if [[ -n "$login" ]]; then
        echo "$login"
        return
    fi
    echo "$(whoami)"
}

#Uncomment this to log to /var/log/cups/error_log
LogFile=/var/log/cups/error_log
LOG() {
    echo "$(date) --- $@" >> $LogFile
}
# Output "Device Discovery" information on stdout:
if test "$#" = "0"
then
  echo 'direct duplex-print "Unknown" "(!) Manual_duplexer unit for linux. (!)"'
  exit 0
fi

#GET PRINTER AND USER FROM URI
#clip spaces
URI=${DEVICE_URI%% *}
# Extract the printer from the uri to which the job schould be sent from the URI.
# Clip the URI scheme (anything up to the first ':' character) and
# clip anything after the first '?' character
USE_PRINTER=${URI#*:}
USE_PRINTER=${USE_PRINTER%%\?*}

# Command line arguments
job="$1"
user="$2"
title="$3"
numcopies="$4"
options="$5"
filename="/var/spool/cups/duplex/$job.duplex"
short_edge=0
long_edge=0

LOG ---
LOG Starting duplexer job
LOG "Script called by $user and runs as $(whoami) with logname $(logname)"

lp_args=
for opt in $options
do
    lp_args="$lp_args -o $opt"
done

#test if file exists
while [ ! -f "$filename" ]
do
  sleep 1
done

page_count=$(pdfinfo "$filename" | grep Pages | awk '{print $2}')
LOG "page count: $page_count"

#   Export display for zenity
export DISPLAY=$(who | grep "^$user" | awk '{print $NF}' | grep -oE ':[0-9]+')
# Calculate width (Assuming you want one-third of the screen width)
screen_width=$(sudo -u "$user" xdpyinfo -display "$DISPLAY" | awk '/dimensions:/ {print $2}' | cut -d'x' -f1)
zenity_width=$(( screen_width / 3 ))

if [ $(( $page_count )) -gt 1 ]; then
	#show user interface
	LOG "$(date) --- Will Show user interface to get page_edge."
	LOG "$(date) --- Running on display number $DISPLAY"
	# Display the Zenity dialog
	button_clicked=$(sudo --user="$user" zenity --question \
    	--switch \
	    --title="$title" \
	    --text="<big><b>Which edge to choose for paper binding?</b></big>\n\nFinding my work useful? <a href='https://www.paypal.com/paypalme2/nanonetK3'>Click here to buy me a coffee.</a>" \
	    --icon-name="document-print" \
	    --window-icon="/usr/share/manual_duplex_linux/printer.png" \
	    --extra-button="Short_Edge" \
	    --extra-button="Long_Edge" \
	    --extra-button="Cancel" \
		--display="$DISPLAY" \
	    --width="$zenity_width" 2>>"$LogFile")

	# Capture the exit status
	last_command_return=$?
	# Log that the user interface was shown
	LOG "$(date) --- User interface has been shown. Zenity returned >> $last_command_return << and button_clicked >> $button_clicked << "

	# Handle the user's response
	case "$button_clicked" in
    	Short_Edge)
        	LOG "$(date) --- Short edge has been chosen."
	        short_edge=1
	        ;;
	    Long_Edge)
	        LOG "$(date) --- Long edge has been chosen."
	        long_edge=1
	        ;;
	    Cancel)
	        LOG "$(date) --- Operation cancelled by user."
	        exit 1
	        ;;
	    *)
	        LOG "$(date) --- An unexpected error occurred. Exit code: $last_command_return."
	        exit 1
	        ;;
	esac
fi

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

#if only one page, just send the printing command
if [ $(( $page_count )) -eq 1 ]; then
	LOG "printing ONE page"

	lp -s -d $USE_PRINTER -n "$numcopies" $lp_args -o collate=true  -t "$title"-even "$filename" >> "$LogFile"

#if only 2 pages, print odd pages first and show user interface
elif [ $(( $page_count )) -eq 2 ]; then
	LOG 2 pages were sent
	LOG Printing odd pages.

	lp -s -d $USE_PRINTER -n "$numcopies" $lp_args -o page-set=odd -o collate=true -o outputorder=normal -t "$title"-odd "$filename"

	#show user interface
	LOG Will Show user interface.
	LOG Running on display number "$DISPLAY"
	sudo --user="$user" zenity --question \
		--title="$title" \
        --text="<big><b>Flip and reinsert the entire paper stack when printing has finished,\n\n then press Procceed.</b></big>\n\n
        				Finding my work usefull? <a href='https://www.paypal.com/paypalme2/nanonetK3'>Click here to buy me a cofee.</a>" \
        --icon-name="document-print" \
        --window-icon="/usr/share/manual_duplex_linux/printer.png" \
        --ok-label="Proceed" \
        --cancel-label="Cancel" \
        --display="$DISPLAY" \
        --width="$zenity_width" 2>>"$LogFile"

    # Capture the exit status
    last_command_return=$?
    # Log that the user interface was shown
    LOG "$(date) --- User interface has been shown. Zenity returned >> $last_command_return << and button_clicked >> $button_clicked << "

	if (($last_command_return==0)); then
		LOG printing even pages
		if [ $(( $short_edge )) -eq 1 ]; then
			lp -s -d $USE_PRINTER -n "$numcopies" $lp_args -o page-ranges=2 -o orientation-requested=5 -o collate=true -o outputorder=normal -t "$title"-even "$filename"
		else
			lp -s -d $USE_PRINTER -n "$numcopies" $lp_args -o page-ranges=2 -o collate=true -o outputorder=normal -t "$title"-even "$filename"
		fi
    else
        LOG User aborted print job
        rm "$filename"
        exit 0
    fi

#if more than 2 pages, print odd pages first and show user interface
elif [ $(( $page_count )) -gt 2 ]; then
    LOG More than 2 pages were sent
    LOG Printing odd pages. it is important for these to be printed first. Do not change this.

    lp -s -d $USE_PRINTER -n "$numcopies" $lp_args -o page-set=odd -o collate=true -o outputorder=normal -t "$title"-odd "$filename"

    #show user interface
    LOG Will Show user interface.

    LOG Running on display number $DISPLAY
    sudo --user="$user" zenity --question \
    	 --title="$title" \
        --text="<big><b>Flip and reinsert the entire paper stack when printing has finished,\n\n then press Procceed.</b></big>\n\n
        				Finding my work usefull? <a href='https://www.paypal.com/paypalme2/nanonetK3'>Click here to buy me a cofee.</a>" \
        --icon-name="document-print" \
        --window-icon="/usr/share/manual_duplex_linux/printer.png" \
        --ok-label="Proceed" \
        --cancel-label="Cancel" \
        --display="$DISPLAY" \
        --width=$zenity_width 2>>"$LogFile"

    # Capture the exit status
    last_command_return=$?
    # Log that the user interface was shown
    LOG "$(date) --- User interface has been shown. Zenity returned >> $last_command_return << and button_clicked >> $button_clicked << "

    if (($last_command_return==0)); then
        LOG printing even pages

		if (( page_count % 2 != 0 )); then
			LOG numpages is odd: one blank page will be printed after each copy.
		# Multiple print jobs, otherwise external app is needed as pdftk
			i=0
			while (( i < $numcopies )); do
				if [ $(( $short_edge )) -eq 1 ]; then
					lp -s -d $USE_PRINTER $lp_args \
						-o page-ranges="$(even_pages "$page_count")" \
						-o sides=one-sided -o orientation-requested=5 -o collate=true -o outputorder=normal -t "$title"-even \
						"$filename"
        		else
        			lp -s -d $USE_PRINTER $lp_args \
        				-o page-ranges="$(even_pages "$page_count")" \
        				-o sides=one-sided -o collate=true -o outputorder=normal -t "$title"-even \
        				"$filename"
    	    	fi
				lp -d $USE_PRINTER $SCRIPT_DIR/blank.pdf
	  			(( i++ ))
			done
		else
			LOG numpages is even: just one printjob for all copies
			# Send to printer
			if [ $(( $short_edge )) -eq 1 ]; then
         		lp -s -d $USE_PRINTER -n "$numcopies" $lp_args \
         			-o page-set=even \
         			-o sides=one-sided -o orientation-requested=5 -o collate=true -o outputorder=normal -t "$title"-even \
					"$filename"
			else
				lp -s -d $USE_PRINTER -n "$numcopies" $lp_args \
					-o page-set=even \
					-o sides=one-sided -o collate=true -o outputorder=normal -t "$title"-even \
					"$filename"
			fi
		fi
    else
        LOG User aborted print job
        rm "$filename"
        exit 0
    fi
fi
# Cleanup
trap 'rm -f "$filename"'
exit 0
